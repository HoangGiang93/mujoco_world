#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (6.582874732259733, 4.445096923498216, 4.599261190981574)
                double3 target = (4.605022567119479, 3.95572241012396, 3.2401342267220095)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            int "rtx:externalFrameCounter" = 312834
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "world"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "world"
{
    def Mesh "floor" (
        delete apiSchemas = ["SemanticsAPI:Semantics_sYmu"]
        prepend apiSchemas = ["PhysicsCollisionAPI", "SemanticsAPI:Semantics_eFrk"]
    )
    {
        float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        bool physics:collisionEnabled = 1
        point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        float[] primvars:displayOpacity = [1]
        string semantic:Semantics_eFrk:params:semanticData = "floor"
        string semantic:Semantics_eFrk:params:semanticType = "class"
        matrix4d xformOp:transform = ( (100, 0, 0, 0), (0, 100, 0, 0), (0, 0, 100, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "apartment"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "apartment_root"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "furnitures_root"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.85, 1.75, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "walls"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "window4_frame" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_hQ9U"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0.38660255)
                        float3 physics:diagonalInertia = (72.95457, 44.774952, 28.183193)
                        float physics:mass = 0
                        string semantic:Semantics_hQ9U:params:semanticData = "window_frame"
                        string semantic:Semantics_hQ9U:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.671098, 3.37273, 1.72145, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_1" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.0677, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.092776, 0), (0, 0, 1.42883, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_2" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.0677, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.18914, 0), (0, 0, 0.795222, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_3" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.0677, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.026796, 0), (0, 0, -1.49481, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_4" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.075574, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.52161, 0), (-0.992126, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_5" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.075574, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.52161, 0), (0.992126, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_6" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.073126, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.52161, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "window4_right_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/furnitures_root/walls/window4_frame>
                            rel physics:body1 = </world/window4_right>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.916552, 0, -0.425471)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (1, 0, 0, 0)
                            quatf physics:localRot1 = (1, 0, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsRevoluteJoint "window4_left_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/furnitures_root/walls/window4_frame>
                            rel physics:body1 = </world/window4_left>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.929112, 0.00162, -0.425471)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }
                    }
                }

                def Xform "windows"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.2, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Xform "wall_coloksu_wall1" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_G4sx"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (5188.8066, 134.41544, 5323.222)
                    float physics:mass = 0
                    string semantic:Semantics_G4sx:params:semanticData = "wall"
                    string semantic:Semantics_G4sx:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (0.0007962024260461664, -0.9999996830307982, -0, 0), (0.9999996830307982, 0.0007962024260461664, 0, 0), (0, -0, 1, 0), (0.6, -1.615, 1.53, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_15" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0012142086997204036, 0, -1.5249995166219672, 0), (0, 9.475, 0, 0), (0.0014999995245461974, 0, 0.0000011943036390692497, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall_coloksu_wall2" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_oHtQ"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (84.74877, 34.103928, 118.85263)
                    float physics:mass = 0
                    string semantic:Semantics_oHtQ:params:semanticData = "wall"
                    string semantic:Semantics_oHtQ:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (-0.9999987317274228, 0.0015926529900403032, 0, 0), (-0.0015926529900403032, -0.9999987317274228, 0, 0), (0, 0, 1, 0), (-8.855, 0.782, 1.53, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_16" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0012142086997204036, 0, -1.5249995166219672, 0), (0, 2.404, 0, 0), (0.0014999995245461974, 0, 0.0000011943036390692497, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall_coloksu_wall3" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_Rw2p"]
                )
                {
                    point3f physics:centerOfMass = (0, 0.012130178, 0)
                    float3 physics:diagonalInertia = (5301.902, 5182.0273, 119.87446)
                    float physics:mass = 0
                    string semantic:Semantics_Rw2p:params:semanticData = "wall"
                    string semantic:Semantics_Rw2p:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (0.0007962024260461664, 0.9999996830307982, 0, 0), (-0.9999996830307982, 0.0007962024260461664, 0, 0), (0, 0, 1, 0), (0.6, 3.18, 1.53, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_17" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0012142086997204036, 0, -1.5249995166219672, 0), (0, 4.175, 0, 0), (0.0014999995245461974, 0, 0.0000011943036390692497, 0), (0, -5.3, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_18" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0012142086997204036, 0, -1.5249995166219672, 0), (0, 4.275, 0, 0), (0.0014999995245461974, 0, 0.0000011943036390692497, 0), (0, 5.2, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wall_coloksu_wall4" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_ZeFB"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (84.74877, 34.103928, 118.85263)
                    float physics:mass = 0
                    string semantic:Semantics_ZeFB:params:semanticData = "wall"
                    string semantic:Semantics_ZeFB:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (10.069, 0.782, 1.53, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_19" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0012142086997204036, 0, -1.5249995166219672, 0), (0, 2.404, 0, 0), (0.0014999995245461974, 0, 0.0000011943036390692497, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "wardrobe" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_TRiL"]
                )
                {
                    point3f physics:centerOfMass = (0.051664993, -0.008428507, 0.95859957)
                    float3 physics:diagonalInertia = (80.77623, 63.388485, 25.782024)
                    float physics:mass = 0
                    string semantic:Semantics_TRiL:params:semanticData = "wardrobe"
                    string semantic:Semantics_TRiL:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (9.7082, -0.6331, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_20" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, -0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_21" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, -0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_22" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (-0.2693, 0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_23" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.075, 0), (0.10603, 0.4482, 0.075, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_24" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.01345, 0), (-0.0805, 0, 0.16345, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_25" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, 0.48965, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_26" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2159, 0, 0, 0), (0, 0.009284, 0, 0), (0, 0, 0.825, 0), (-0.0896, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_27" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.01035, 0, 0), (0, 0, 0.825, 0), (-0.0805, -0.48965, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_28" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_29" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.01835, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.825, 0), (0.14465, 0, 0.975, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_30" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.2435, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.0135, 0), (-0.0805, 0, 1.7865, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_31" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.5727, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_32" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 0.974836, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_33" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.21495, 0, 0, 0), (0, 0.234979, 0, 0), (0, 0, 0.0059, 0), (-0.08861, -0.244343, 1.37686, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cylinder "geom_34" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        float3[] extent = [(-0.0075, -0.0075, -0.234949), (0.0075, 0.0075, 0.234949)]
                        double height = 0.469898
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        double radius = 0.0075
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -0.000004242642374308048, 0.9999999999910001, 0), (0, -0.9999999999910001, -0.000004242642374308048, 0), (-0.086923, 0.244373, 1.66898, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def PhysicsRevoluteJoint "wardrobe_door_left_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/wardrobe>
                        rel physics:body1 = </world/wardrobe_door_left>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.3246, 0.5, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0, 0, 1, 0)
                        quatf physics:localRot1 = (0, 0, 1, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }

                    def PhysicsRevoluteJoint "wardrobe_door_right_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/wardrobe>
                        rel physics:body1 = </world/wardrobe_door_right>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (-0.3246, -0.5, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 90.00021
                    }
                }

                def Xform "armchair" (
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_dGMH"]
                )
                {
                    point3f physics:centerOfMass = (-3.1594288e-7, 0.049581565, -0.0897828)
                    float3 physics:diagonalInertia = (22.020412, 16.910583, 10.649451)
                    float physics:mass = 0
                    string semantic:Semantics_dGMH:params:semanticData = "armchair"
                    string semantic:Semantics_dGMH:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (-0.34205571731337603, 0.939679672150692, 0, 0), (-0.939679672150692, -0.34205571731337603, 0, 0), (0, 0, 1, 0), (7.9688, -0.3791, 0.355943, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "geom_43" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                        prepend references = @./iai_apartment_with_window4/usd/armchair.usda@
                    )
                    {
                        uniform token physics:approximation = "convexHull"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.0000019224230554115707, -0.4086303368862716, 0.912699976866723, 0), (-0.9999999999981521, -7.85560380744954e-7, 0.0000017545954782982598, 0), (-5.551115123125783e-17, -0.9126999768684094, -0.40863033688702677, 0), (-3.159428731661707e-7, 0.049581563247065356, -0.08978279605655398, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "sofa" (
                    delete apiSchemas = ["SemanticsAPI:Semantics_yves"]
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_NAjm"]
                )
                {
                    point3f physics:centerOfMass = (-1.7593665e-8, 0.043824177, -0.018792812)
                    float3 physics:diagonalInertia = (374.80246, 346.2379, 59.946693)
                    float physics:mass = 0
                    string semantic:Semantics_NAjm:params:semanticData = "sofa"
                    string semantic:Semantics_NAjm:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.1986, 2.4096, 0.35733, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "geom_44" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                        prepend references = @./iai_apartment_with_window4/usd/sofa.usda@
                    )
                    {
                        uniform token physics:approximation = "convexHull"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0, -0.36802898651240673, 0.929814317531544, 0), (0, -0.9298143175315441, -0.36802898651240673, 0), (1, 0, 0, 0), (-1.7593665712876568e-8, 0.04382417609452533, -0.01879281245901686, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }

                def Xform "coffee_table" (
                    delete apiSchemas = ["SemanticsAPI:Semantics_dIjT"]
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_Aqh7"]
                )
                {
                    point3f physics:centerOfMass = (0.01086685, 0, 0.20130123)
                    float3 physics:diagonalInertia = (46.798466, 40.253555, 13.411085)
                    float physics:mass = 0
                    string semantic:Semantics_Aqh7:params:semanticData = "coffee_table"
                    string semantic:Semantics_Aqh7:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (-0.000004242642374308048, 0.9999999999910001, 0, 0), (-0.9999999999910001, -0.000004242642374308048, 0, 0), (0, 0, 1, 0), (7.8034, 1.02957, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_45" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.29, 0, 0, 0), (0, 0.54, 0, 0), (0, 0, 0.02977, 0), (0, 0, 0.02977, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_46" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.3053, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.00598, 0), (-0.022101, 0, 0.06552, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_47" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, 0.39975, 0.220625, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_48" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0, -0.39975, 0.220625, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_49" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.03365, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.16, 0), (0.316343, 0, 0.22, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cube "geom_50" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.6, 0, 0), (0, 0, 0.01, 0), (0, 0, 0.39, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def PhysicsPrismaticJoint "coffee_table_drawer_joint"
                    {
                        uniform token physics:axis = "Z"
                        rel physics:body0 = </world/apartment/apartment_root/furnitures_root/coffee_table>
                        rel physics:body1 = </world/coffee_table_drawer>
                        bool physics:collisionEnabled = 0
                        point3f physics:localPos0 = (0, 0, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                        quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                        float physics:lowerLimit = 0
                        float physics:upperLimit = 0.5
                    }
                }

                def Xform "bedside_table" (
                    delete apiSchemas = ["SemanticsAPI:Semantics_Yl0r"]
                    prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_cfMt"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (1.1528307, 1.1528307, 0.72648215)
                    float physics:mass = 0
                    string semantic:Semantics_cfMt:params:semanticData = "bedside_table"
                    string semantic:Semantics_cfMt:params:semanticType = "class"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (7.211, 0.1296, 0.229905, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cube "geom_56" (
                        prepend apiSchemas = ["PhysicsCollisionAPI"]
                    )
                    {
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        float[] primvars:displayOpacity = [1]
                        matrix4d xformOp:transform = ( (0.156, 0, 0, 0), (0, 0.156, 0, 0), (0, 0, 0.23, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }
            }

            def Xform "kitchen_root"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "kitchen1_root"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "cabinet1" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_LA4h"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_dgQ4"]
                    )
                    {
                        point3f physics:centerOfMass = (-0.07706114, 0.03069221, 0.08507417)
                        float3 physics:diagonalInertia = (44.755943, 41.348133, 9.135281)
                        float physics:mass = 0
                        string semantic:Semantics_dgQ4:params:semanticData = "cabinet"
                        string semantic:Semantics_dgQ4:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.284632, 1.46676, 1.11441, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_57" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.27747, 0, 0), (0, 0, 1.06389, 0), (0.3, 0.010499, 0.05, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_58" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0095, 0, 0, 0), (0, 0.27747, 0, 0), (0, 0, 1.06389, 0), (-0.280469, 0.010499, 0.05, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_59" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 1.05589, 0), (0.009901, 0.271973, 0.041995, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_60" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01046, 0, 0, 0), (0, 0.287969, 0, 0), (0, 0, 1.11388, 0), (-0.299967, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_61" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.032, 0), (0.009901, -0.254976, 1.06578, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_62" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.270471, 0, 0), (0, 0, 0.008, 0), (0.009901, 0.0055, 1.10578, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_63" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.270471, 0, 0), (0, 0, 0.0075, 0), (0.009901, 0.0005, 0.249501, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_64" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.280969, 0, 0, 0), (0, 0.267471, 0, 0), (0, 0, 0.0075, 0), (0.009901, 0.0005, -0.361161, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "cabinet1_door_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_door>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.28, -0.28, 0.677)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsPrismaticJoint "cabinet1_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.0112201, -0.0467902, -0.486585)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet1_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1>
                            rel physics:body1 = </world/cabinet1_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.011, -0.046, -0.816)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def Xform "oven" (
                            delete apiSchemas = ["SemanticsAPI:Semantics_0CQz"]
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (-0.0054364796, 0.31322974, 0.3414465)
                            float3 physics:diagonalInertia = (10.146727, 8.711131, 8.526399)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.0123597, -0.273959, -0.342672, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_89" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.294945, 0, 0, 0), (0, 0.272833, 0, 0), (0, 0, 0.075421, 0), (-0.003055, 0.264778, 0.50654, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_90" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.294945, 0, 0, 0), (0, 0.272833, 0, 0), (0, 0, 0.022799, 0), (-0.003055, 0.264778, 0.018039, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_91" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.0295, 0, 0, 0), (0, 0.272833, 0, 0), (0, 0, 0.293011, 0), (-0.2675, 0.264778, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_92" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.027451, 0, 0, 0), (0, 0.272833, 0, 0), (0, 0, 0.293011, 0), (0.264104, 0.264778, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_93" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.294945, 0, 0, 0), (0, 0.037392, 0, 0), (0, 0, 0.293011, 0), (-0.003055, 0.5, 0.288951, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def PhysicsRevoluteJoint "oven_door_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet1/oven>
                                rel physics:body1 = </world/oven_door>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (0, 0, 0)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
                                quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 90.00021
                            }
                        }
                    }

                    def Xform "cabinet2" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_0vat"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_EFhm"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.03405041, 0.06526537)
                        float3 physics:diagonalInertia = (28.632782, 28.588385, 3.1973345)
                        float physics:mass = 0
                        string semantic:Semantics_EFhm:params:semanticData = "cabinet"
                        string semantic:Semantics_EFhm:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.279909, 1.97705, 1.16239, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_95" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.277359, 0, 0), (0, 0, 1.06384, 0), (-0.191979, 0.005897, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_96" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.277359, 0, 0), (0, 0, 1.06384, 0), (0.191979, 0.005897, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_97" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.183882, 0, 0, 0), (0, 0.277359, 0, 0), (0, 0, 0.008, 0), (0, 0.005897, 1.05584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_98" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.183882, 0, 0, 0), (0, 0.277359, 0, 0), (0, 0, 0.008, 0), (0, 0.005897, 0.975845, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_99" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.183882, 0, 0, 0), (0, 0.277359, 0, 0), (0, 0, 0.008, 0), (0, 0.005897, -1.05594, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_100" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.183882, 0, 0, 0), (0, 0.007187, 0, 0), (0, 0, 0.031996, 0), (0, -0.26039, 1.01584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_101" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.183882, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 1.04784, 0), (0, 0.267372, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "cabinet2_door_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_door>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.18657, -0.284321, 0.00105865)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def Xform "cabinet2_shelf"
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00043732, -0.00337784, 0.790361, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, 0.580462)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, 0.422749)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, 0.142897)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer4_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer4>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, -0.242437)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer5_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer5>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, -0.518096)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet2_drawer6_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet2>
                            rel physics:body1 = </world/cabinet2_drawer6>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00134538, -0.00464775, -0.955192)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet3" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_6wTf"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_IuJx"]
                    )
                    {
                        point3f physics:centerOfMass = (0.00048441917, -0.008527586, 0.085132115)
                        float3 physics:diagonalInertia = (48.640648, 45.904274, 6.8833714)
                        float physics:mass = 0
                        string semantic:Semantics_IuJx:params:semanticData = "cabinet"
                        string semantic:Semantics_IuJx:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.274985, 2.4799, 1.16288, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_161" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 1.06382, 0), (0.291968, 0.003155, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_162" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 1.06382, 0), (-0.291968, 0.003155, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_163" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 0.008, 0), (0, 0.003155, 1.05584, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_164" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 0.008, 0), (0, 0.003155, 0.895854, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_165" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 0.008, 0), (0, 0.003155, 0.819863, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_166" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 0.008, 0), (0, 0.003155, -0.980943, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_167" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.277193, 0, 0), (0, 0, 0.008, 0), (0, 0.003155, -1.05594, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_168" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.0104594, 0, 0), (0, 0, 0.07201, 0), (0, -0.262453, 0.975825, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_169" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.0104594, 0, 0), (0, 0, 0.03, 0), (0, -0.262453, 0.857803, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_170" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.286067, 0, 0, 0), (0, 0.0104594, 0, 0), (0, 0, 0.03, 0), (0, -0.262453, 0.857803, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_171" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.073992, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.037346, 0), (0.20788, -0.264485, -1.02629, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "fridge_door1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3>
                            rel physics:body1 = </world/fridge_door1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.299145, -0.297259, 0.25674)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsRevoluteJoint "fridge_door2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3>
                            rel physics:body1 = </world/fridge_door2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.29909, -0.297259, -0.638008)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0, 0, 1, 0)
                            quatf physics:localRot1 = (0, 0, 1, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def Xform "fridge_base" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0.03482795, -0.063978)
                            float3 physics:diagonalInertia = (70.73892, 66.973236, 11.303162)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00292496, -0.0191809, -0.0816938, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_193" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.021622, 0, 0, 0), (0, 0.241826, 0, 0), (0, 0, 0.879405, 0), (0.257778, 0.016051, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_194" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.021622, 0, 0, 0), (0, 0.241826, 0, 0), (0, 0, 0.879405, 0), (-0.257778, 0.016051, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_195" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.012277, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.318196, 0), (0.223235, -0.029351, -0.561142, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_196" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.012277, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.318196, 0), (-0.223235, -0.029351, -0.561142, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_197" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.278217, 0, 0, 0), (0, 0.246695, 0, 0), (0, 0, 0.023998, 0), (0, 0.011034, 0.855407, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_198" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.03771, 0), (0, -0.029351, 0.839695, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_199" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.0125, 0), (0, -0.029351, 0.224975, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_200" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.058965, 0), (0, -0.029351, -0.18398, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_201" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.196424, 0, 0), (0, 0, 0.036788, 0), (0, -0.029351, -0.842617, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_202" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.00782, 0, 0), (0, 0, 0.464658, 0), (0, 0.159364, 0.339754, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_203" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.234783, 0, 0, 0), (0, 0.058398, 0, 0), (0, 0, 0.281275, 0), (0, 0.199778, -0.524221, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "fridge_shelf1" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0, 0, 0)
                                float3 physics:diagonalInertia = (0.0068327826, 0.020846814, 0.027663898)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00204316, -0.00102744, 0.545451, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_204" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.234134, 0, 0, 0), (0, 0.133991, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }

                            def Xform "fridge_shelf2" (
                                prepend apiSchemas = ["PhysicsMassAPI"]
                            )
                            {
                                point3f physics:centerOfMass = (0, 0, 0)
                                float3 physics:diagonalInertia = (0.0068327826, 0.020846814, 0.027663898)
                                float physics:mass = 0
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00204316, -0.00102744, 0.411236, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_205" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.234134, 0, 0, 0), (0, 0.133991, 0, 0), (0, 0, 0.004544, 0), (0, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }

                            def PhysicsPrismaticJoint "fridge_drawer1_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer1>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.00223595, -0.0120901, 0.110257)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                                quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer2_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer2>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (0.00198811, -0.0154834, -0.0496125)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                                quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer3_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer3>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.00251899, -0.032657, -0.356176)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                                quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer4_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer4>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (-0.00508168, -0.0288522, -0.532998)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                                quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }

                            def PhysicsPrismaticJoint "fridge_drawer5_joint"
                            {
                                uniform token physics:axis = "Z"
                                rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet3/fridge_base>
                                rel physics:body1 = </world/fridge_drawer5>
                                bool physics:collisionEnabled = 0
                                point3f physics:localPos0 = (0, -0.0648077, -0.712787)
                                point3f physics:localPos1 = (0, 0, 0)
                                quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                                quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                                float physics:lowerLimit = 0
                                float physics:upperLimit = 0.3
                            }
                        }
                    }

                    def Xform "cabinet4" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_WYrg"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_CrFv"]
                    )
                    {
                        point3f physics:centerOfMass = (0.081960484, 0.042299215, -0.000015838574)
                        float3 physics:diagonalInertia = (7.5693283, 5.228653, 3.1578875)
                        float physics:mass = 0
                        string semantic:Semantics_CrFv:params:semanticData = "cabinet"
                        string semantic:Semantics_CrFv:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.182244, 3.29388, 1.82711, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_236" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.483948, 0, 0, 0), (0, 0.005, 0, 0), (0, 0, 0.38291, 0), (-0.010048, 0.168984, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_237" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.174981, 0, 0), (0, 0, 0.398908, 0), (-0.501898, 0.01, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_238" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.174981, 0, 0), (0, 0, 0.398908, 0), (0.481997, 0.01, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_239" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.184869, 0, 0), (0, 0, 0.398908, 0), (0.5, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_240" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.483948, 0, 0, 0), (0, 0.168981, 0, 0), (0, 0, 0.008, 0), (-0.010048, 0.004, 0.390908, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_241" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.483948, 0, 0, 0), (0, 0.168981, 0, 0), (0, 0, 0.008, 0), (-0.010048, 0.004, -0.391007, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Xform "cabinet4_door1" (
                            delete apiSchemas = ["SemanticsAPI:Semantics_dpQw", "SemanticsAPI:Semantics_pw9w"]
                            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_65Zw"]
                        )
                        {
                            point3f physics:centerOfMass = (0, -0.002895, 0)
                            float3 physics:diagonalInertia = (0.097850926, 0.7146551, 0.61725426)
                            float physics:mass = 0
                            string semantic:Semantics_65Zw:params:semanticData = "cabinet_door"
                            string semantic:Semantics_65Zw:params:semanticType = "class"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00837158, -0.172261, 0.199167, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_242" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.497446, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197868, 0), (0, -0.002895, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "cabinet4_door2" (
                            delete apiSchemas = ["SemanticsAPI:Semantics_8jpc", "SemanticsAPI:Semantics_AFkr"]
                            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_orTz"]
                        )
                        {
                            point3f physics:centerOfMass = (0, -0.025359, 0)
                            float3 physics:diagonalInertia = (0.097850926, 0.7146551, 0.61725426)
                            float physics:mass = 0
                            string semantic:Semantics_orTz:params:semanticData = "cabinet_door"
                            string semantic:Semantics_orTz:params:semanticType = "class"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0093109, -0.150429, -0.199949, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_243" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.497446, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197868, 0), (0, -0.025359, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "cabinet4_door2_handle" (
                                delete apiSchemas = ["SemanticsAPI:Semantics_MPBk"]
                                prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_vJTG"]
                            )
                            {
                                point3f physics:centerOfMass = (-0.017291656, 0, 0)
                                float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
                                float physics:mass = 0
                                string semantic:Semantics_vJTG:params:semanticData = "handle"
                                string semantic:Semantics_vJTG:params:semanticType = "class"
                                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.0141519, -0.0410386, -0.133571, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cube "geom_244" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cube "geom_245" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cube "geom_246" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }
                            }
                        }

                        def Xform "cabinet4_shelf1" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.018893862, 0.1875902, 0.20645788)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (-0.0101648, 0.00833792, 0.125006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_247" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.483948, 0, 0, 0), (0, 0.153539, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "cabinet4_shelf2" (
                            prepend apiSchemas = ["PhysicsMassAPI"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.018893862, 0.1875902, 0.20645788)
                            float physics:mass = 0
                            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, 1, 0), (-0.0101648, 0.00833792, -0.0984018, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_248" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.483948, 0, 0, 0), (0, 0.153539, 0, 0), (0, 0, 0.004042, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }
                    }

                    def Xform "counter_wall" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_0M9z"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.49548447, 1.4661331, 1.9596411)
                        float physics:mass = 0
                        string semantic:Semantics_0M9z:params:semanticData = "counter"
                        string semantic:Semantics_0M9z:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (0.281428, 3.29494, 0.908921, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_249" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.515532, 0, 0, 0), (0, 0.2995, 0, 0), (0, 0, 0.013389, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "cabinet5" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_QJ9i"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_ixr8"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.045634627, -0.0720516)
                        float3 physics:diagonalInertia = (3.1576848, 2.3979921, 2.1526704)
                        float physics:mass = 0
                        string semantic:Semantics_ixr8:params:semanticData = "cabinet"
                        string semantic:Semantics_ixr8:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.274766, 3.08412, 0.494207, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_250" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (-0.291968, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_251" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (0.291968, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_252" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_253" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_254" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 0.38291, 0), (0, 0.261473, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00100026, -0.052627, 0.331778)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00079152, -0.0530376, 0.133725)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet5_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet5>
                            rel physics:body1 = </world/cabinet5_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00075551, -0.0534509, -0.195667)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet6" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_A3lF"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_hZrj"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.034447238, -0.054388054)
                        float3 physics:diagonalInertia = (1.9767264, 1.9737027, 1.1823037)
                        float physics:mass = 0
                        string semantic:Semantics_hZrj:params:semanticData = "cabinet"
                        string semantic:Semantics_hZrj:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.274766, 3.58384, 0.494207, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_283" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (-0.191779, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_284" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (0.191779, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_285" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_286" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_287" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 0.38291, 0), (0, 0.261473, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00032649, -0.053296, 0.331778)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00074397, -0.0530569, 0.132969)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet6_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen1_root/cabinet6>
                            rel physics:body1 = </world/cabinet6_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00069453, -0.0527976, -0.196909)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "island_cover4" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_yXya"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.9771155, 0.6808572, 0.29687595)
                        float physics:mass = 0
                        string semantic:Semantics_yXya:params:semanticData = "island_cover"
                        string semantic:Semantics_yXya:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.272592, 3.79516, 0.446017, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_316" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.009554, 0, 0, 0), (0, 0.296074, 0, 0), (0, 0, 0.448506, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "kitchen1_base_board" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (0.0044582705, 2.9116833, 2.9075606)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (0.55976, 2.47826, 0.0516843, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_317" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.30158, 0, 0, 0), (0, 0.009889, 0, 0), (0, 0, 0.05, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }

                def Xform "kitchen2_root"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "counter_sink_stove" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_pqup"]
                    )
                    {
                        point3f physics:centerOfMass = (0.304538, 0.0466976, 0.37917456)
                        float3 physics:diagonalInertia = (188.77603, 179.29427, 19.826786)
                        float physics:mass = 0
                        string semantic:Semantics_pqup:params:semanticData = "counter"
                        string semantic:Semantics_pqup:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.65274, 2.70904, 0.465629, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_318" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.0145, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.467231, 0), (1.5755, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_319" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.58852, 0, 0, 0), (0, 0.237531, 0, 0), (0, 0, 0.015, 0), (0, 0.262968, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_320" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.58852, 0, 0, 0), (0, 0.048817, 0, 0), (0, 0, 0.015, 0), (0, -0.451058, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_321" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.367711, 0, 0, 0), (0, 0.498, 0, 0), (0, 0, 0.015, 0), (-1.22213, 0, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_322" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.02804, 0, 0, 0), (0, 0.498, 0, 0), (0, 0, 0.015, 0), (0.560551, 0, 0.453637, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Xform "stove" (
                            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_7u5w"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0, 0)
                            float3 physics:diagonalInertia = (0.043711405, 0.103754714, 0.14745855)
                            float physics:mass = 0
                            string semantic:Semantics_7u5w:params:semanticData = "stove"
                            string semantic:Semantics_7u5w:params:semanticType = "class"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.08145, -0.156557, 0.471606, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_323" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.3975, 0, 0, 0), (0, 0.258, 0, 0), (0, 0, 0.002401, 0), (0, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }
                        }

                        def Xform "counter_sink" (
                            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_9cmA"]
                        )
                        {
                            point3f physics:centerOfMass = (0, 0.04775382, -0.024448458)
                            float3 physics:diagonalInertia = (0.63524556, 0.40020916, 0.32437155)
                            float physics:mass = 0
                            string semantic:Semantics_9cmA:params:semanticData = "sink"
                            string semantic:Semantics_9cmA:params:semanticType = "class"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.665534, -0.188876, 0.382404, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Cube "geom_324" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.202106, 0, 0, 0), (0, 0.038996, 0, 0), (0, 0, 0.088694, 0), (0, 0.18348, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_325" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.202106, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.088694, 0), (0, -0.212477, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_326" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.222309, 0, 0), (0, 0, 0.088694, 0), (0.192479, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_327" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.222309, 0, 0), (0, 0, 0.088694, 0), (-0.192479, 0, 0, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Cube "geom_328" (
                                prepend apiSchemas = ["PhysicsCollisionAPI"]
                            )
                            {
                                bool physics:collisionEnabled = 1
                                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                float[] primvars:displayOpacity = [1]
                                matrix4d xformOp:transform = ( (0.202106, 0, 0, 0), (0, 0.222309, 0, 0), (0, 0, 0.013701, 0), (0, 0, -0.074992, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]
                            }

                            def Xform "counter_watertab" (
                                prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_uC5U"]
                            )
                            {
                                point3f physics:centerOfMass = (-0.01469326, 0.079966486, 0.0038307062)
                                float3 physics:diagonalInertia = (0.009072517, 0.007913992, 0.00154421)
                                float physics:mass = 0
                                string semantic:Semantics_uC5U:params:semanticData = "watertab"
                                string semantic:Semantics_uC5U:params:semanticType = "class"
                                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.0196184, 0.0767719, 0.238987, 1) )
                                uniform token[] xformOpOrder = ["xformOp:transform"]

                                def Cylinder "geom_329" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.022435, -0.022435, -0.038739), (0.022435, 0.022435, 0.038739)]
                                    double height = 0.077478
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.022435
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0195, 0.113704, -0.11162, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_330" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.014, -0.014, -0.10908), (0.014, 0.014, 0.10908)]
                                    double height = 0.21816
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.014
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0195, 0.113704, 0.041404, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_331" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.010966, -0.010966, -0.003818), (0.010966, 0.010966, 0.003818)]
                                    double height = 0.007636
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.010966
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0195, -0.116237, 0.121328, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_332" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.022466, -0.022466, -0.044495), (0.022466, 0.022466, 0.044495)]
                                    double height = 0.08899
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.022466
                                    matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.009, 0.113731, -0.073523, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Sphere "geom_333" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.018, -0.018, -0.018), (0.018, 0.018, 0.018)]
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.018
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.035496, 0.113738, -0.073492, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def Cylinder "geom_334" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI"]
                                )
                                {
                                    float3[] extent = [(-0.014, -0.014, -0.131986), (0.014, 0.014, 0.131986)]
                                    double height = 0.263972
                                    bool physics:collisionEnabled = 1
                                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                                    float[] primvars:displayOpacity = [1]
                                    double radius = 0.014
                                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (-0.019498, -0.00425, 0.136485, 1) )
                                    uniform token[] xformOpOrder = ["xformOp:transform"]
                                }

                                def PhysicsRevoluteJoint "counter_sink_tap_temperature_joint"
                                {
                                    uniform token physics:axis = "Z"
                                    rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/counter_sink_stove/counter_sink/counter_watertab>
                                    rel physics:body1 = </world/counter_sink_tap_switch>
                                    bool physics:collisionEnabled = 0
                                    point3f physics:localPos0 = (0.0405528, 0.113711, -0.0737045)
                                    point3f physics:localPos1 = (0, 0, 0)
                                    quatf physics:localRot0 = (0, -0.7071068, 0, 0.7071068)
                                    quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                                    float physics:lowerLimit = -90.00021
                                    float physics:upperLimit = 90.00021
                                }
                            }
                        }
                    }

                    def Xform "dishwasher" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_Tr3D"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.19296232, 0.040619005)
                        float3 physics:diagonalInertia = (7.082724, 5.918655, 4.529273)
                        float physics:mass = 0
                        string semantic:Semantics_Tr3D:params:semanticData = "dishwasher"
                        string semantic:Semantics_Tr3D:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.32419, 3.96355, 0.162264, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_338" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007724, 0, 0, 0), (0, 0.197879, 0, 0), (0, 0, 0.420898, 0), (-0.291193, 0.244142, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_339" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007724, 0, 0, 0), (0, 0.197879, 0, 0), (0, 0, 0.420898, 0), (0.291193, 0.244142, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_340" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007724, 0, 0, 0), (0, 0.064761, 0, 0), (0, 0, 0.351941, 0), (-0.291193, -0.018498, 0.328806, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_341" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007724, 0, 0, 0), (0, 0.064761, 0, 0), (0, 0, 0.351941, 0), (0.291193, -0.018498, 0.328806, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_342" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.298917, 0, 0, 0), (0, 0.002413, 0, 0), (0, 0, 0.420898, 0), (0, 0.439555, 0.25785, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_343" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.298917, 0, 0, 0), (0, 0.258487, 0, 0), (0, 0, 0.006749, 0), (0, 0.183466, 0.671998, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_344" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.298917, 0, 0, 0), (0, 0.258487, 0, 0), (0, 0, 0.083552, 0), (0, 0.183466, -0.079608, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsRevoluteJoint "dishwasher_front_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_front>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00031149, -0.0761212, 0.00728645)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
                            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 90.00021
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00735926, 0.194014, 0.227136)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.5
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00735798, 0.17742, 0.402328)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }

                        def PhysicsPrismaticJoint "dishwasher_tray3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/dishwasher>
                            rel physics:body1 = </world/dishwasher_tray3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0131252, 0.197872, 0.611314)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }
                    }

                    def Xform "cabinet8" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_VlC8"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_7R7p"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.04543142, -0.07251122)
                        float3 physics:diagonalInertia = (3.1352587, 2.381179, 2.1342988)
                        float physics:mass = 0
                        string semantic:Semantics_7R7p:params:semanticData = "cabinet"
                        string semantic:Semantics_7R7p:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.49268, 3.37232, 0.494481, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_353" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007942, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.398895, 0), (-0.291912, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_354" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007942, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.398895, 0), (0.291912, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_355" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.003944, 0, 0), (0, 0, 0.382909, 0), (0, 0.26153, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_356" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.39091, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_357" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "sink_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet8>
                            rel physics:body1 = </world/sink_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00013535, -0.0508662, 0.0032)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "sink_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet8>
                            rel physics:body1 = </world/sink_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00142344, -0.0729948, 0.164377)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.3
                        }
                    }

                    def Xform "cabinet9" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_RIPm"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_PsNv"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.04543142, -0.07251122)
                        float3 physics:diagonalInertia = (3.1352587, 2.381179, 2.1342988)
                        float physics:mass = 0
                        string semantic:Semantics_PsNv:params:semanticData = "cabinet"
                        string semantic:Semantics_PsNv:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.49288, 2.77269, 0.494068, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_400" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007942, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.398895, 0), (-0.291912, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_401" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.007942, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.398895, 0), (0.291912, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_402" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.003944, 0, 0), (0, 0, 0.382909, 0), (0, 0.26153, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_403" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.39091, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_404" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.284067, 0, 0, 0), (0, 0.277025, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391005, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00175364, -0.0507959, 0.332084)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00065196, -0.050753, 0.134945)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet9_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet9>
                            rel physics:body1 = </world/cabinet9_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00167063, -0.0504523, -0.196113)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet10" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_z4Wd"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_hbqy"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.034447238, -0.054388054)
                        float3 physics:diagonalInertia = (1.9767264, 1.9737027, 1.1823037)
                        float physics:mass = 0
                        string semantic:Semantics_hbqy:params:semanticData = "cabinet"
                        string semantic:Semantics_hbqy:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.49299, 2.27192, 0.50112, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_433" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (-0.191779, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_434" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (0.191779, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_435" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_436" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_437" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.184833, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 0.38291, 0), (0, 0.261473, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00062459, -0.0509572, 0.325652)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00006861, -0.0507138, 0.128052)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet10_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet10>
                            rel physics:body1 = </world/cabinet10_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0.00036921, -0.0504031, -0.203967)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "cabinet11" (
                        delete apiSchemas = ["SemanticsAPI:Semantics_ShWb"]
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_0bR2"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0.05768674, -0.091080435)
                        float3 physics:diagonalInertia = (5.822687, 4.4897346, 3.0065546)
                        float physics:mass = 0
                        string semantic:Semantics_0bR2:params:semanticData = "cabinet"
                        string semantic:Semantics_0bR2:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.49294, 1.62156, 0.509844, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_466" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (-0.441952, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_467" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.399006, 0), (0.441952, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_468" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.43394, 0, 0, 0), (0, 0.27726, 0, 0), (0, 0, 0.008, 0), (0, 0, -0.391006, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_469" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.43394, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.008, 0), (0, 0.217476, 0.390909, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def Cube "geom_470" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.43394, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 0.38291, 0), (0, 0.261473, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer1_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer1>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00063939, -0.0508224, 0.318169)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer2_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer2>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.0004598, -0.0503088, 0.119178)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }

                        def PhysicsPrismaticJoint "cabinet11_drawer3_joint"
                        {
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </world/apartment/apartment_root/kitchen_root/kitchen2_root/cabinet11>
                            rel physics:body1 = </world/cabinet11_drawer3>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (-0.00146352, -0.0507751, -0.213308)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
                            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.45
                        }
                    }

                    def Xform "kitchen2_base_board" (
                        prepend apiSchemas = ["PhysicsMassAPI"]
                    )
                    {
                        point3f physics:centerOfMass = (-0.3023, 0, 0)
                        float3 physics:diagonalInertia = (0.0053949654, 5.0305624, 5.0255823)
                        float physics:mass = 0
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.21094, 2.40968, 0.0496364, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_499" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.55624, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 0.05, 0), (-0.3023, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover1" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_wsCs"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (3.7129457, 48.40199, 44.69241)
                        float physics:mass = 0
                        string semantic:Semantics_wsCs:params:semanticData = "island_cover"
                        string semantic:Semantics_wsCs:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.86825, 2.7196, 0.450317, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_500" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (1.56783, 0, 0, 0), (0, 0.009625, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover3" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_lzic"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (1.3060349, 0.83522344, 0.47162947)
                        float physics:mass = 0
                        string semantic:Semantics_lzic:params:semanticData = "island_cover"
                        string semantic:Semantics_lzic:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (2.53831, 4.2773, 0.45176, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_501" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.339444, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "island_cover5" (
                        prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_f5jf"]
                    )
                    {
                        point3f physics:centerOfMass = (0, 0, 0)
                        float3 physics:diagonalInertia = (1.3060349, 0.83522344, 0.47162947)
                        float physics:mass = 0
                        string semantic:Semantics_f5jf:params:semanticData = "island_cover"
                        string semantic:Semantics_f5jf:params:semanticType = "class"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (2.5375, 1.16089, 0.446014, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Cube "geom_502" (
                            prepend apiSchemas = ["PhysicsCollisionAPI"]
                        )
                        {
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                            float[] primvars:displayOpacity = [1]
                            matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.339444, 0, 0), (0, 0, 0.451805, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }
            }
        }
    }

    def Xform "window4_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_h0UA"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_h0UA:params:semanticData = "window"
        string semantic:Semantics_h0UA:params:semanticType = "class"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (10.43765, 5.12273, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_7" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.421713, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.03155, 0), (-0.421713, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "window4_right_handle_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/window4_right>
            rel physics:body1 = </world/window4_right_handle>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.815383, -0.019236, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 179.99985
        }
    }

    def Xform "window4_right_handle" (
        delete apiSchemas = ["SemanticsAPI:Semantics_hKsK"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (9.622266999999999, 5.1034939999999995, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "geom_8" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
            double height = 0.075236
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (0, -0.011369, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_9" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
            double height = 0.131626
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.040987, -0.057684, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_10" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
            double height = 0.052952
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (0, -0.022511, -0.115497, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "window4_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_IAZy"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_IAZy:params:semanticData = "window"
        string semantic:Semantics_IAZy:params:semanticType = "class"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (8.591986, 5.12435, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_11" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.43203, 0, 0, 0), (0, 0.01, 0, 0), (0, 0, 1.03155, 0), (0.43203, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "window4_left_handle_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/window4_left>
            rel physics:body1 = </world/window4_left_handle>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.834107, -0.019236, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 179.99985
        }
    }

    def Xform "window4_left_handle" (
        delete apiSchemas = ["SemanticsAPI:Semantics_V7QH"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (9.426093, 5.1051139999999995, 1.095979, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "geom_12" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.037618), (0.008, 0.008, 0.037618)]
            double height = 0.075236
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (0, -0.011369, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_13" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.065813), (0.008, 0.008, 0.065813)]
            double height = 0.131626
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0.040987, -0.057684, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_14" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.008, -0.008, -0.026476), (0.008, 0.008, 0.026476)]
            double height = 0.052952
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.008
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 0.9999999999999998, 0), (0, -0.9999999999999998, 2.220446049250313e-16, 0), (0, -0.022511, -0.115497, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "wardrobe_door_left" (
        delete apiSchemas = ["SemanticsAPI:Semantics_sYmu", "SemanticsAPI:Semantics_vJTG"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_4Wbv"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_4Wbv:params:semanticData = "wardrobe_door"
        string semantic:Semantics_4Wbv:params:semanticType = "class"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 1.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_35" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, -0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "wardrobe_door_left_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_RHjO"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_kEvs"]
        )
        {
            point3f physics:centerOfMass = (-0.0053838952, 0, 0)
            float3 physics:diagonalInertia = (0.00009915017, 0.000092480914, 0.000008305764)
            float physics:mass = 0
            string semantic:Semantics_kEvs:params:semanticData = "handle"
            string semantic:Semantics_kEvs:params:semanticType = "class"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, -0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_36" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_37" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_38" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "wardrobe_door_right" (
        delete apiSchemas = ["SemanticsAPI:Semantics_0CQz", "SemanticsAPI:Semantics_kEvs"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_wN6I"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_wN6I:params:semanticData = "wardrobe_door"
        string semantic:Semantics_wN6I:params:semanticType = "class"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (18.2336, 0.6169, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_39" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0064835, 0, 0, 0), (0, 0.247719, 0, 0), (0, 0, 0.82422, 0), (-0.006435, 0.2485, 0.975, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "wardrobe_door_right_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_XoKV"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_hV49"]
        )
        {
            point3f physics:centerOfMass = (-0.0053838952, 0, 0)
            float3 physics:diagonalInertia = (0.00009915017, 0.000092480914, 0.000008305764)
            float physics:mass = 0
            string semantic:Semantics_hV49:params:semanticData = "handle"
            string semantic:Semantics_hV49:params:semanticType = "class"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.032089, 0.460513, 0.973703, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_40" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, 0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_41" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.007243, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.065, 0), (-0.0136, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_42" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.016778, 0, 0, 0), (0, 0.007541, 0, 0), (0, 0, 0.0072935, 0), (0.010421, 0, -0.059003, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "coffee_table_drawer" (
        delete apiSchemas = ["SemanticsAPI:Semantics_Zjqo"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_0ngj"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_0ngj:params:semanticData = "coffee_table_drawer"
        string semantic:Semantics_0ngj:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-0.000004242642374308048, 0.9999999999910001, 0, 0), (-0.9999999999910001, -0.000004242642374308048, 0, 0), (0, 0, 1, 0), (16.653399999999998, 2.77957, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_51" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.198, 0, 0), (0, 0, 0.157845, 0), (-0.338806, 0, 0.21892, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_52" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.1727, 0, 0), (0, 0, 0.01072, 0), (-0.051066, 0, 0.107979, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_53" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0107, 0, 0, 0), (0, 0.1743, 0, 0), (0, 0, 0.1199, 0), (0.207974, 0, 0.238907, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_54" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, -0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_55" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.27605, 0, 0, 0), (0, 0.0107, 0, 0), (0, 0, 0.132125, 0), (-0.051066, 0.186206, 0.226597, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet1_door" (
        delete apiSchemas = ["SemanticsAPI:Semantics_65Zw", "SemanticsAPI:Semantics_hV49"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_sYmu"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_sYmu:params:semanticData = "cabinet_door"
        string semantic:Semantics_sYmu:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.564632, 1.18676, 1.79141, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_65" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.433405, 0), (0.285091, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_door_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_1qDG"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_GW1U"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_GW1U:params:semanticData = "handle"
            string semantic:Semantics_GW1U:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.463156, -0.0155998, -0.389834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_66" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_67" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_68" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet1_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_geAd"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_3CcG"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_3CcG:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_3CcG:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.3314222, 1.4779801000000001, 0.6278249999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_69" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131486, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_70" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.0111962, 0), (0.26865, 0.021336, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_71" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.0111962, 0), (-0.26865, 0.021336, 0.0412455, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_72" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.041748, 0), (0.26865, 0.021336, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_73" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.026549, 0), (-0.26865, 0.021336, -0.0941, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_74" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.26182, 0, 0, 0), (0, 0.24578, 0, 0), (0, 0, 0.008, 0), (0, 0.021399, -0.114232, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_75" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.26182, 0, 0, 0), (0, 0.00932692, 0, 0), (0, 0, 0.084435, 0), (0, 0.26, -0.038, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_chEB"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_pw9w"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_pw9w:params:semanticData = "handle"
            string semantic:Semantics_pw9w:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00091816, -0.247929, 0.0840143, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_76" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_77" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_78" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet1_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_5qtV"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_iZMQ"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_iZMQ:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_iZMQ:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.330632, 1.47776, 0.29840999999999973, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_79" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.19714, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_80" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.0111962, 0), (0.26865, 0.021336, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_81" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.0111962, 0), (-0.26865, 0.021336, -0.0084109, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_82" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.041751, 0), (0.26865, 0.021336, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_83" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0079221, 0, 0, 0), (0, 0.24585, 0, 0), (0, 0, 0.041751, 0), (-0.26865, 0.021336, -0.12854, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_84" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.26182, 0, 0, 0), (0, 0.24578, 0, 0), (0, 0, 0.008, 0), (0, 0.021399, -0.16226, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_85" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.26182, 0, 0, 0), (0, 0.00932692, 0, 0), (0, 0, 0.0758612, 0), (0, 0.26, -0.0797358, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet1_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_HeMc"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_AFkr"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_AFkr:params:semanticData = "handle"
            string semantic:Semantics_AFkr:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00145845, -0.249094, 0.150606, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_86" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_87" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_88" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "oven_door" (
        delete apiSchemas = ["SemanticsAPI:Semantics_GW1U", "SemanticsAPI:Semantics_orTz"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_8jpc"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_8jpc:params:semanticData = "oven_door"
        string semantic:Semantics_8jpc:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.5585910000000001, 1.4791197, 0.7717379999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_94" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.295294, 0, 0, 0), (0, 0.018499, 0, 0), (0, 0, 0.235848, 0), (-0.002993, 0.005395, 0.226757, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_door" (
        delete apiSchemas = ["SemanticsAPI:Semantics_4Wbv", "SemanticsAPI:Semantics_dewN"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_0CQz"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_0CQz:params:semanticData = "cabinet_door"
        string semantic:Semantics_0CQz:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.56423, 1.7904799999999998, 1.16344865, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_102" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198479, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 1.06138, 0), (0.185074, -0.000653, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet2_door_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_oJsi"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_dewN"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_dewN:params:semanticData = "handle"
            string semantic:Semantics_dewN:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.25886, -0.00184994, -0.105189, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_103" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_104" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_105" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet2_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_PkUj"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_Wvk4"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_Wvk4:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_Wvk4:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 1.742852, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_106" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.0085, 0, 0), (0, 0, 0.050495, 0), (0, -0.242975, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_107" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.050495, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_108" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.050495, 0), (-0.170578, -0.003984, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_109" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.050495, 0), (0.170578, -0.003984, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_110" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.039746, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_tEMw"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_rvwa"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_rvwa:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_rvwa:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 1.585139, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_111" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.049, 0), (0, -0.242374, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_112" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.010149, 0), (0, -0.242374, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_113" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (-0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_114" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_115" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.090879, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_116" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (-0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_117" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_118" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (-0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_119" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_120" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_aOPp"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_KihN"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_KihN:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_KihN:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 1.305287, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_121" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.049, 0), (0, -0.242374, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_122" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.010149, 0), (0, -0.242374, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_123" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (-0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_124" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_125" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.090879, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_126" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (-0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_127" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_128" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (-0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_129" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_130" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer4" (
        delete apiSchemas = ["SemanticsAPI:Semantics_zJp8"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_znDo"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_znDo:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_znDo:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 0.919953, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_131" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.049, 0), (0, -0.242374, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_132" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.010149, 0), (0, -0.242374, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_133" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (-0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_134" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_135" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.090879, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_136" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (-0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_137" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_138" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (-0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_139" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_140" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer5" (
        delete apiSchemas = ["SemanticsAPI:Semantics_2FFU"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_hKsK"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_hKsK:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_hKsK:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 0.6442939999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_141" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.049, 0), (0, -0.242374, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_142" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.010149, 0), (0, -0.242374, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_143" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (-0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_144" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_145" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.090879, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_146" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (-0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_147" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_148" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (-0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_149" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_150" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet2_drawer6" (
        delete apiSchemas = ["SemanticsAPI:Semantics_u6x5"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_V7QH"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_V7QH:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_V7QH:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.28455675, 1.97839538, 0.20719799999999977, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_151" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.049, 0), (0, -0.242374, -0.042, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_152" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.006898, 0, 0), (0, 0, 0.010149, 0), (0, -0.242374, 0.060843, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_153" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (-0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_154" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032441, 0, 0, 0), (0, 0.008393, 0, 0), (0, 0, 0.09099, 0), (0.148428, -0.242869, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_155" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.008064, 0, 0), (0, 0, 0.090879, 0), (0, 0.235441, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_156" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (-0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_157" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.011649, 0), (0.170578, -0.003984, 0.075342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_158" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (-0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_159" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.043553, 0), (0.170578, -0.003984, -0.043743, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_160" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.180981, 0, 0, 0), (0, 0.247489, 0, 0), (0, 0, 0.010749, 0), (0, -0.003984, -0.080242, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_door1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_wN6I", "SemanticsAPI:Semantics_z942"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_SImG"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_SImG:params:semanticData = "fridge_door"
        string semantic:Semantics_SImG:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.572244, 2.180755, 1.41962, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_172" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298246, 0, 0, 0), (0, 0.009277, 0, 0), (0, 0, 0.668339, 0), (0.297325, 0.006948, 0.139709, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_173" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.276867, 0, 0, 0), (0, 0.0125, 0, 0), (0, 0, 0.494447, 0), (0.295455, 0.03605, -0.001115, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "fridge_door1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_OCqa"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_z942"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_z942:params:semanticData = "handle"
            string semantic:Semantics_z942:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.465343, -0.00799103, -0.3616, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_174" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_175" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_176" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "fridge_door_tray1" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, -0.014739217)
            float3 physics:diagonalInertia = (0.0062140855, 0.0059009767, 0.0009047668)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.297261, 0.103791, -0.0156525, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_177" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_178" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.047787, 0), (-0.054273, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_179" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_180" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.047787, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_181" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.05471, 0, 0, 0), (0, 0.210927, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.047166, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "fridge_door_tray2" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, -0.011598332)
            float3 physics:diagonalInertia = (0.004150598, 0.003830189, 0.00044448595)
            float physics:mass = 0
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.298471, 0.101769, 0.223872, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_182" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_183" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.001, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.026901, 0), (-0.054019, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_184" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, 0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_185" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.026901, 0), (0, -0.209978, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_186" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.054994, 0, 0, 0), (0, 0.210977, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.025903, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "fridge_egg_tray" (
                prepend apiSchemas = ["PhysicsMassAPI"]
            )
            {
                point3f physics:centerOfMass = (0.012743861, 0.000006811056, 0.0035979373)
                float3 physics:diagonalInertia = (0.00073122716, 0.00039433665, 0.00035283528)
                float physics:mass = 0
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00226576, 0.0853088, 0.00069855, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "geom_187" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                    prepend references = @./iai_apartment_with_window4/usd/SM_Fridge_Egg_Tray.usda@
                )
                {
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                    float[] primvars:displayOpacity = [1]
                    matrix4d xformOp:transform = ( (0.32574812062874625, 0.000004478134360222635, 0.9454565891074989, 0), (-0.0014779711170391924, -0.9999987757238169, 0.000513957434106565, 0), (0.9454554339090853, -0.0015647781993586613, -0.32574771520452717, 0), (0.012743861237421673, 0.0000068110562601408404, 0.0035979373039856225, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }
    }

    def Xform "fridge_door2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_SImG", "SemanticsAPI:Semantics_t7QD"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_dpQw"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_dpQw:params:semanticData = "fridge_door"
        string semantic:Semantics_dpQw:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.572244, 2.18081, 0.5248719999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_188" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298246, 0, 0, 0), (0, 0.009277, 0, 0), (0, 0, 0.39297, 0), (0.297325, 0.006948, -0.028308, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_189" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.276867, 0, 0, 0), (0, 0.0125, 0, 0), (0, 0, 0.311166, 0), (0.295455, 0.03605, 0.019366, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "fridge_door2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_ewx8"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_t7QD"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_t7QD:params:semanticData = "handle"
            string semantic:Semantics_t7QD:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.465383, 0.00804657, 0.317868, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_190" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_191" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_192" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "fridge_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_GT9S"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_MiVK"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_MiVK:params:semanticData = "fridge_drawer"
        string semantic:Semantics_MiVK:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.306256, 2.48058901, 1.1914432, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_206" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.0025, 0, 0), (0, 0, 0.011921, 0), (0, -0.169309, 0.070506, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_207" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.001448, 0, 0), (0, 0, 0.047864, 0), (0, -0.169309, -0.034598, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_208" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.002123, 0, 0), (0, 0, 0.082076, 0), (0, 0.16468, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_209" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00983, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.082076, 0), (-0.217307, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_210" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00983, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.082076, 0), (0.217307, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_211" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.080999, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_jH9V"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_POe2"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_POe2:params:semanticData = "fridge_drawer"
        string semantic:Semantics_POe2:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.30964929999999996, 2.4848130700000004, 1.0315736999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_212" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.0025, 0, 0), (0, 0, 0.011801, 0), (0, -0.169309, 0.057007, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_213" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.001448, 0, 0), (0, 0, 0.032111, 0), (0, -0.169309, -0.036775, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_214" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.002123, 0, 0), (0, 0, 0.068941, 0), (0, 0.16468, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_215" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00983, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.068941, 0), (-0.217307, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_216" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00983, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.068941, 0), (0.217307, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_217" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.227117, 0, 0, 0), (0, 0.171761, 0, 0), (0, 0, 0.001372, 0), (0, 0, -0.066161, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_qx8N"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_Yjuh"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_Yjuh:params:semanticData = "fridge_drawer"
        string semantic:Semantics_Yjuh:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.32682289999999997, 2.4803059700000003, 0.7250101999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_218" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.012462, 0), (0, -0.165482, 0.083453, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_219" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.05887, 0), (0, -0.165482, -0.037113, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_220" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001555, 0, 0), (0, 0, 0.095915, 0), (0, 0.154928, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_221" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00732, 0, 0, 0), (0, 0.161445, 0, 0), (0, 0, 0.095915, 0), (-0.197083, -0.004962, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_222" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.00732, 0, 0, 0), (0, 0.161445, 0, 0), (0, 0, 0.095915, 0), (0.197083, -0.004962, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_223" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.161445, 0, 0), (0, 0, 0.000911, 0), (0, -0.004962, -0.095072, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer4" (
        delete apiSchemas = ["SemanticsAPI:Semantics_zpc9"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_at0C"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_at0C:params:semanticData = "fridge_drawer"
        string semantic:Semantics_at0C:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.3230181, 2.4777432800000003, 0.5481881999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_224" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.012462, 0), (0, -0.165482, 0.063456, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_225" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.04, 0), (0, -0.165482, -0.035978, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_226" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.075917, 0), (0, 0.155483, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_227" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.166408, 0, 0), (0, 0, 0.075917, 0), (-0.196311, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_228" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.166408, 0, 0), (0, 0, 0.075917, 0), (0.196311, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_229" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204478, 0, 0, 0), (0, 0.166408, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.074992, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "fridge_drawer5" (
        delete apiSchemas = ["SemanticsAPI:Semantics_bS2F"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_Ztia"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_Ztia:params:semanticData = "fridge_drawer"
        string semantic:Semantics_Ztia:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.3589736, 2.4828249600000003, 0.3683991999999998, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_230" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204404, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.012499, 0), (0, -0.120488, 0.08099, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_231" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204404, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 0.055353, 0), (0, -0.118669, -0.03813, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_232" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204404, 0, 0, 0), (0, 0.003217, 0, 0), (0, 0, 0.075917, 0), (0, 0.108269, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_233" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.007461, 0, 0, 0), (0, 0.120421, 0, 0), (0, 0, 0.075917, 0), (-0.196942, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_234" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.007461, 0, 0, 0), (0, 0.120421, 0, 0), (0, 0, 0.075917, 0), (0.196942, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_235" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.204404, 0, 0, 0), (0, 0.120421, 0, 0), (0, 0, 0.001, 0), (0, 0, -0.09249, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet5_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_cpYU"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_cw2g"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_cw2g:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_cw2g:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.32739300000000005, 3.08512026, 0.8259850000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_255" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (-0.270267, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_256" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (0.270267, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_257" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.064993, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_258" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0, 0.260372, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_259" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.0075, 0), (0, 0.021031, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_raHZ"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_Zjqo"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_Zjqo:params:semanticData = "handle"
            string semantic:Semantics_Zjqo:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00142363, -0.249809, 0.0167695, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_260" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_261" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_262" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet5_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_aPSL"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_LA4h"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_LA4h:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_LA4h:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.32780360000000003, 3.08491152, 0.627932, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_263" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (-0.270267, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_264" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (0.270267, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_265" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (-0.270267, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_266" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (0.270267, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_267" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131375, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_268" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084491, 0), (0, 0.260372, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_269" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_FXrH"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_geAd"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_geAd:params:semanticData = "handle"
            string semantic:Semantics_geAd:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00106413, -0.250711, 0.0850084, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_270" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_271" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_272" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet5_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_MqLC"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_0vat"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_0vat:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_0vat:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.32821690000000003, 3.08487551, 0.2985399999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_273" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (-0.270267, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_274" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (0.270267, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_275" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (-0.270267, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_276" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (0.270267, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_277" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197867, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_278" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084105, 0), (0, 0.260372, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_279" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet5_drawer3_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_CcBM"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_5qtV"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_5qtV:params:semanticData = "handle"
            string semantic:Semantics_5qtV:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00102875, -0.248882, 0.15027, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_280" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_281" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_282" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_dgQ4"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_6wTf"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_6wTf:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_6wTf:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.328062, 3.58416649, 0.8259850000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_288" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (-0.170562, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_289" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (0.170562, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_290" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.064993, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_291" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0, 0.260372, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_292" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.0075, 0), (0, 0.021031, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_zLjH"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_PkUj"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_PkUj:params:semanticData = "handle"
            string semantic:Semantics_PkUj:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00124599, -0.246623, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_293" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_294" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_295" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_EFhm"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_WYrg"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_WYrg:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_WYrg:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.32782290000000003, 3.5845839699999997, 0.6271760000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_296" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (-0.170562, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_297" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (0.170562, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_298" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (-0.170562, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_299" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (0.170562, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_300" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131375, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_301" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084491, 0), (0, 0.260372, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_302" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_4Nkp"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_tEMw"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_tEMw:params:semanticData = "handle"
            string semantic:Semantics_tEMw:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00397854, -0.246862, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_303" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_304" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_305" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet6_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_IuJx"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_QJ9i"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_QJ9i:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_QJ9i:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.3275636, 3.58453453, 0.29729799999999995, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_306" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (-0.170562, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_307" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (0.170562, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_308" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (-0.170562, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_309" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (0.170562, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_310" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197867, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_311" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084105, 0), (0, 0.260372, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_312" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet6_drawer3_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_DxhB"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_aOPp"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_aOPp:params:semanticData = "handle"
            string semantic:Semantics_aOPp:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00402777, -0.247122, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_313" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_314" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_315" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "counter_sink_tap_switch" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (2.7543469000000003, 3.3144028, 1.0133155000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_335" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0005, 0, 0, 0), (0, 0.0005, 0, 0), (0, 0, 0.0005, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "counter_sink_switch_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/counter_sink_tap_switch>
            rel physics:body1 = </world/counter_sink_tap>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 22.499996
        }
    }

    def Xform "counter_sink_tap" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 1.0000000000000002, 0, 0), (-1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (2.7543469000000003, 3.3144028, 1.0133155000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "geom_336" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.022432, -0.022432, -0.012197), (0.022432, 0.022432, 0.012197)]
            double height = 0.024394
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.022432
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -0.9999999999999998, 0), (0, 1, 0, 0), (0.9999999999999998, 0, 2.220446049250313e-16, 0), (-0.007501, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "geom_337" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.027997), (0.005, 0.005, 0.027997)]
            double height = 0.055994
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.005
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.012886, 0, 0.048989, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_front" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.3480688, 3.96323851, 0.16955045, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_345" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.304987, 0, 0, 0), (0, 0.009444, 0, 0), (0, 0, 0.397179, 0), (0, -0.04, 0.329015, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_346" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.287469, 0, 0, 0), (0, 0.015, 0, 0), (0, 0, 0.339603, 0), (-0.01, -0.015728, 0.334215, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "dishwasher_front_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_cw2g"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_zJp8"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_zJp8:params:semanticData = "handle"
            string semantic:Semantics_zJp8:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.0169432, -0.0549352, 0.678848, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_347" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_348" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_349" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "dishwasher_tray1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.6182040000000004, 3.97090926, 0.3894000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_350" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @./iai_apartment_with_window4/usd/SM_Dishwasher_Tray_01.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (-0.009638002417740488, 0.08873157456646318, 0.9960089440282912, 0), (0.03379995611274965, -0.9954571185271635, 0.08900948342942351, 0), (0.999382145065726, 0.03452293221255699, 0.006595094788960365, 0), (0.0038508828946616203, -0.051238970548196226, -0.04651838258942738, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_tray2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.6016100000000004, 3.9709079800000002, 0.5645920000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_351" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @./iai_apartment_with_window4/usd/SM_Dishwasher_Tray_02.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.012337407196479022, 0.07318552317570987, 0.9972420305929582, 0), (0.03993178597484452, -0.9965584220571801, 0.07264133737592969, 0), (0.9991262386968566, 0.03892544957225366, -0.015217375695910196, 0), (0.004625496018656968, -0.01003551642333726, 0.017332645133442803, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "dishwasher_tray3" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.6220620000000006, 3.9766752000000003, 0.7735780000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_352" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @./iai_apartment_with_window4/usd/SM_Dishwasher_Tray_03.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (-0.000010466825824284598, -0.0006526726287034465, 0.9999997869544202, 0), (0.005707051232630026, -0.9999835017021594, -0.0006526022650388329, 0), (0.9999837145957298, 0.005707043186093745, 0.00001419148926917746, 0), (-0.00047623489807682674, -0.0055148395382697305, 0.003219398480713823, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "sink_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_CrFv"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_CK2E"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_CK2E:params:semanticData = "sink_drawer"
        string semantic:Semantics_CK2E:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5418138, 3.37245535, 0.497681, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_358" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298258, 0, 0, 0), (0, 0.009388, 0, 0), (0, 0, 0.397013, 0), (0, -0.233976, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_359" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269754, 0, 0, 0), (0, 0.009017, 0, 0), (0, 0, 0.084742, 0), (0, 0.259483, -0.288887, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_360" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.042, 0), (0.268047, 0.025012, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_361" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.042, 0), (-0.268047, 0.025012, -0.08949, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_362" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.011648, 0), (0.268047, 0.025012, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_363" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.011648, 0), (-0.268047, 0.025012, -0.208727, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_364" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.043609, 0), (0.268047, 0.025012, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_365" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.0075, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.043609, 0), (-0.268047, 0.025012, -0.33085, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_366" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.031012, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.008, 0), (0.246033, 0.025012, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_367" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.031012, 0, 0, 0), (0, 0.249028, 0, 0), (0, 0, 0.008, 0), (-0.246033, 0.025012, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_368" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.277046, 0, 0, 0), (0, 0.010504, 0, 0), (0, 0, 0.008, 0), (0, -0.213959, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_369" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.277046, 0, 0, 0), (0, 0.058653, 0, 0), (0, 0, 0.008, 0), (0, 0.21583, -0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_370" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.173305, 0), (-0.00535, 0.086505, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_371" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.173305, 0), (-0.211412, 0.086505, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_372" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.008356, 0, 0), (0, 0, 0.173305, 0), (-0.109826, 0.152938, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_373" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.008356, 0, 0), (0, 0, 0.173305, 0), (-0.109826, 0.02, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_374" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.00085, 0), (-0.109826, 0.086505, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_375" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.173305, 0), (0.00535, 0.086505, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_376" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.173305, 0), (0.211412, 0.086505, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_377" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.109826, 0.152938, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_378" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.109826, 0.02, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_379" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.109826, 0, 0, 0), (0, 0.074789, 0, 0), (0, 0, 0.00085, 0), (0.109826, 0.086505, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_380" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.173305, 0), (-0.221355, -0.098209, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_381" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.173305, 0), (-0.088435, -0.098209, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_382" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074691, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.155, 0.003041, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_383" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074691, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (-0.155, -0.199821, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_384" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.074691, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.00085, 0), (-0.155, -0.098209, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_385" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.173305, 0), (0.221355, -0.098209, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_386" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008426, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.173305, 0), (-0.071323, -0.098209, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_387" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.154749, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.075302, 0.003041, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_388" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.154749, 0, 0, 0), (0, 0.008426, 0, 0), (0, 0, 0.173305, 0), (0.075302, -0.199821, -0.198155, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_389" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.154749, 0, 0, 0), (0, 0.109729, 0, 0), (0, 0, 0.00085, 0), (0.075302, -0.098209, -0.372315, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "sink_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_81dG"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_2FFU"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_2FFU:params:semanticData = "handle"
            string semantic:Semantics_2FFU:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00331339, -0.249002, 0.350717, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_390" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_391" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_392" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "sink_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_ixr8"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_QiK2"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_QiK2:params:semanticData = "sink_drawer"
        string semantic:Semantics_QiK2:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5196852, 3.37374344, 0.658858, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_393" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.188013, 0, 0), (0, 0, 0.041105, 0), (-0.270604, 0.002535, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_394" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.188013, 0, 0), (0, 0, 0.041105, 0), (0.270604, 0.002535, -0.000733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_395" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032497, 0, 0, 0), (0, 0.0085, 0, 0), (0, 0, 0.049661, 0), (-0.248473, -0.191981, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_396" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.032497, 0, 0, 0), (0, 0.0085, 0, 0), (0, 0, 0.049661, 0), (0.248473, -0.191981, 0.000834, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_397" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.216977, 0, 0, 0), (0, 0.0085, 0, 0), (0, 0, 0.049, 0), (0, -0.191981, -0.0015, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_398" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.278678, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.0415, 0), (0, 0.184382, -0.0024, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_399" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.278678, 0, 0, 0), (0, 0.188013, 0, 0), (0, 0, 0.008, 0), (0, 0.002535, -0.036496, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cabinet9_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_hZrj"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_A3lF"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_A3lF:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_A3lF:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5420841, 2.77093636, 0.826152, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_405" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (-0.270267, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_406" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (0.270267, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_407" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.064993, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_408" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0, 0.260372, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_409" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.0075, 0), (0, 0.021031, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_rQEO"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_u6x5"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_u6x5:params:semanticData = "handle"
            string semantic:Semantics_u6x5:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00142363, -0.249809, 0.0167695, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_410" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_411" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_412" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet9_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_7R7p"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_VlC8"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_VlC8:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_VlC8:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5421270000000002, 2.77203804, 0.629013, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_413" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (-0.270267, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_414" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (0.270267, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_415" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (-0.270267, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_416" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (0.270267, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_417" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131375, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_418" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084491, 0), (0, 0.260372, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_419" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_EfTW"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_GT9S"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_GT9S:params:semanticData = "handle"
            string semantic:Semantics_GT9S:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00106413, -0.250711, 0.0850084, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_420" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_421" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_422" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet9_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_PsNv"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_RIPm"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_RIPm:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_RIPm:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5424277, 2.77101937, 0.29795499999999997, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_423" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (-0.270267, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_424" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (0.270267, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_425" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (-0.270267, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_426" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (0.270267, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_427" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.298468, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197867, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_428" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084105, 0), (0, 0.260372, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_429" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.269804, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet9_drawer3_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_1LD6"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_jH9V"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_jH9V:params:semanticData = "handle"
            string semantic:Semantics_jH9V:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.00102875, -0.248882, 0.15027, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_430" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_431" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_432" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_hbqy"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_z4Wd"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_z4Wd:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_z4Wd:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5420328, 2.2725445900000003, 0.8267720000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_438" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (-0.170562, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_439" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (0.170562, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_440" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.064993, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_441" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0, 0.260372, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_442" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.0075, 0), (0, 0.021031, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_3CcG"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_qx8N"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_qx8N:params:semanticData = "handle"
            string semantic:Semantics_qx8N:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00124599, -0.246623, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_443" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_444" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_445" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_0bR2"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_ShWb"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_ShWb:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_ShWb:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5422762, 2.27185139, 0.6291720000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_446" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (-0.170562, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_447" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (0.170562, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_448" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (-0.170562, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_449" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (0.170562, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_450" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131375, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_451" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084491, 0), (0, 0.260372, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_452" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_iZMQ"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_zpc9"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_zpc9:params:semanticData = "handle"
            string semantic:Semantics_zpc9:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00397854, -0.246862, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_453" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_454" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_455" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet10_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_5gfi"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_yves"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_yves:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_yves:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5425869, 2.27155079, 0.29715299999999994, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_456" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (-0.170562, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_457" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (0.170562, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_458" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (-0.170562, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_459" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (0.170562, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_460" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.198867, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197867, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_461" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084105, 0), (0, 0.260372, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_462" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.178822, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet10_drawer3_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_Wvk4"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_bS2F"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_bS2F:params:semanticData = "handle"
            string semantic:Semantics_bS2F:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00402777, -0.247122, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_463" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_464" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_465" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer1" (
        delete apiSchemas = ["SemanticsAPI:Semantics_woWF"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_dIjT"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_dIjT:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_dIjT:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5421176, 1.6221993899999998, 0.828013, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_471" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (-0.418233, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_472" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.042633, 0), (0.418233, 0.021031, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_473" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.448341, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.064993, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_474" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.042633, 0), (0, 0.260372, -0.01336, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_475" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.0075, 0), (0, 0.021031, -0.047595, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer1_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_rvwa"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_cpYU"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_cpYU:params:semanticData = "handle"
            string semantic:Semantics_cpYU:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00124599, -0.246623, 0.0172039, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_476" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_477" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_478" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer2" (
        delete apiSchemas = ["SemanticsAPI:Semantics_UdH5"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_Yl0r"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_Yl0r:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_Yl0r:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5426312, 1.6220198, 0.629022, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_479" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (-0.418233, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_480" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011649, 0), (0.418233, 0.021031, 0.041246, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_481" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (-0.418233, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_482" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041748, 0), (0.418233, 0.021031, -0.078968, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_483" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.448341, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.131375, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_484" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084491, 0), (0, 0.260372, -0.037996, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_485" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.113735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer2_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_KihN"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_aPSL"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_aPSL:params:semanticData = "handle"
            string semantic:Semantics_aPSL:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00397854, -0.246862, 0.0854179, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_486" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_487" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_488" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "cabinet11_drawer3" (
        delete apiSchemas = ["SemanticsAPI:Semantics_beVs"]
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticsAPI:Semantics_fFAc"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.001, 0.001, 0.001)
        float physics:mass = 0.001
        bool physics:rigidBodyEnabled = 1
        string semantic:Semantics_fFAc:params:semanticData = "cabinet_drawer"
        string semantic:Semantics_fFAc:params:semanticType = "class"
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1.0000000000000002, -0, 0), (1.0000000000000002, -2.220446049250313e-16, 0, 0), (0, -0, 1, 0), (2.5421649, 1.6230235199999998, 0.2965359999999999, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_489" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (-0.418233, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_490" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.011638, 0), (0.418233, 0.021031, -0.00926, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_491" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (-0.418233, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_492" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.008, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.041711, 0), (0.418233, 0.021031, -0.129424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_493" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.448341, 0, 0, 0), (0, 0.0095, 0, 0), (0, 0, 0.197867, 0), (0, -0.233977, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_494" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.008, 0, 0), (0, 0, 0.084105, 0), (0, 0.260372, -0.088821, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_495" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.419788, 0, 0, 0), (0, 0.245507, 0, 0), (0, 0, 0.008, 0), (0, 0.021031, -0.164582, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "cabinet11_drawer3_handle" (
            delete apiSchemas = ["SemanticsAPI:Semantics_znDo"]
            prepend apiSchemas = ["PhysicsMassAPI", "SemanticsAPI:Semantics_MqLC"]
        )
        {
            point3f physics:centerOfMass = (-0.017291656, 0, 0)
            float3 physics:diagonalInertia = (0.000118450924, 0.000116826224, 0.000002638771)
            float physics:mass = 0
            string semantic:Semantics_MqLC:params:semanticData = "handle"
            string semantic:Semantics_MqLC:params:semanticType = "class"
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0.9999999999999998, 0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.00402777, -0.247122, 0.151166, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "geom_496" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, 0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_497" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.0065, 0, 0), (0, 0, 0.0065, 0), (-0.003891, -0.08, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "geom_498" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (0.0065, 0, 0, 0), (0, 0.086516, 0, 0), (0, 0, 0.0065, 0), (-0.0203895, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "tiago" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.021877313, 7.5273414e-7, 0.31898826)
        float3 physics:diagonalInertia = (5.1762943, 5.1442747, 2.5550568)
        float physics:mass = 94.7676
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.5, 2.5, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsPrismaticJoint "suspension_right_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/suspension_right_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.0985)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -0.005
            float physics:upperLimit = 0.005
        }

        def PhysicsPrismaticJoint "suspension_left_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/suspension_left_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.0985)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -0.005
            float physics:upperLimit = 0.005
        }

        def PhysicsRevoluteJoint "caster_front_right_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/caster_front_right_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.1695, -0.102, 0.065)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "caster_front_left_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/caster_front_left_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.1695, 0.102, 0.065)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "caster_back_right_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/caster_back_right_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.1735, -0.102, 0.065)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "caster_back_left_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/caster_back_left_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.1735, 0.102, 0.065)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsPrismaticJoint "torso_lift_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/tiago>
            rel physics:body1 = </world/torso_lift_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.062, 0, 0.8885)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.35
        }
    }

    def Xform "suspension_right_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.5, 2.5, 0.09850000000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "wheel_right_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/suspension_right_link>
            rel physics:body1 = </world/wheel_right_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, -0.2022, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "wheel_right_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.00207)
        float3 physics:diagonalInertia = (0.0083924, 0.00499747, 0.00499738)
        float physics:mass = 1.82362
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.50001860239996, 2.7021999991442898, 0.09850000000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "suspension_left_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.5, 2.5, 0.09850000000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "wheel_left_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/suspension_left_link>
            rel physics:body1 = </world/wheel_left_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0.2022, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "wheel_left_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.00207)
        float3 physics:diagonalInertia = (0.0083924, 0.00499747, 0.00499738)
        float physics:mass = 1.82362
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.49998139760004, 2.2978000008557102, 0.09850000000000003, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "caster_front_right_1_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.330509384717304, 2.602015593568303, 0.06500000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "caster_front_right_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/caster_front_right_1_link>
            rel physics:body1 = </world/caster_front_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "caster_front_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00001541, 0.00001075, 0.00001075)
        float physics:mass = 0.0885578
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.346509384649593, 2.602014121568306, 0.02500000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "caster_front_left_1_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.330490616717343, 2.398015594431631, 0.06500000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "caster_front_left_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/caster_front_left_1_link>
            rel physics:body1 = </world/caster_front_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "caster_front_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00001541, 0.00001075, 0.00001075)
        float physics:mass = 0.0885578
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.346490616649632, 2.398014122431634, 0.02500000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "caster_back_right_1_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.673509383265728, 2.6019840375683696, 0.06500000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "caster_back_right_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/caster_back_right_1_link>
            rel physics:body1 = </world/caster_back_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "caster_back_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00001541, 0.00001075, 0.00001075)
        float physics:mass = 0.0885578
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.689509383198017, 2.6019825655683726, 0.02500000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "caster_back_left_1_link"
    {
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.673490615265768, 2.397984038431698, 0.06500000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "caster_back_left_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/caster_back_left_1_link>
            rel physics:body1 = </world/caster_back_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "caster_back_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00001541, 0.00001075, 0.00001075)
        float physics:mass = 0.0885578
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, -1, 0), (-0.00009199999980532799, -0.999999995768, 0, 0), (12.689490615198057, 2.397982566431701, 0.02500000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "torso_lift_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.04361, -0.00116, -0.17334)
        float3 physics:diagonalInertia = (0.328778, 0.236545, 0.172571)
        float physics:mass = 9.59421
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.561999999737615, 2.499994296000012, 0.8885000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "head_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/torso_lift_link>
            rel physics:body1 = </world/head_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.182, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -75.000175
            float physics:upperLimit = 75.000175
        }

        def PhysicsRevoluteJoint "arm_left_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/torso_lift_link>
            rel physics:body1 = </world/arm_left_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.02556, 0.19, -0.171)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0, 0.70710677, 0.70710677, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.50016
            float physics:upperLimit = 90.00021
        }

        def PhysicsRevoluteJoint "arm_right_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/torso_lift_link>
            rel physics:body1 = </world/arm_right_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.02556, -0.19, -0.171)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.50016
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "head_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.00508, 0.00237, 0.07229)
        float3 physics:diagonalInertia = (0.00140223, 0.00121968, 0.000861083)
        float physics:mass = 0.6222
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680004, 0.000091999999805328, 0, 0), (-0.000091999999805328, -0.9999999957680004, 0, 0), (0, 0, 1, 0), (12.38000000050784, 2.500011039999977, 0.8885000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "head_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/head_1_link>
            rel physics:body1 = </world/head_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.005, 0, 0.098)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60.00014
            float physics:upperLimit = 44.999992
        }
    }

    def Xform "head_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.0558274, 0.0609987, 0.0000158542)
        float3 physics:diagonalInertia = (0.00554181, 0.00436261, 0.00347586)
        float physics:mass = 0.88693
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980532799, 0, 0), (0, 0, 1, 0), (0.00009199999980532799, 0.999999995768, 0, 0), (12.375000000528999, 2.500011499999976, 0.9865000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "arm_left_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.061191, -0.022397, 0.012835)
        float3 physics:diagonalInertia = (0.00510233, 0.00510233, 0.00510233)
        float physics:mass = 1.56343
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.00009199999980524787, -0.999999995768, -0, 0), (-0.999999995768, 0.00009199999980524787, 0, 0), (0, 0, -1, 0), (12.536422519845823, 2.3099966483240872, 0.7175000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_1_link>
            rel physics:body1 = </world/arm_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.125, -0.0195, 0.031)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.50016
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "arm_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.030432, 0.000229, 0.005942)
        float3 physics:diagonalInertia = (0.00437039, 0.00432895, 0.00178367)
        float physics:mass = 1.8004
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.00009199999980546991, -0.9999999957680002, 0, 0), (0, -2.220446049250313e-16, -1.0000000000000002, 0), (0.9999999957680002, -0.00009199999980524787, -2.220446049250313e-16, 0), (12.555911019763323, 2.184994854853091, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_3_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_2_link>
            rel physics:body1 = </world/arm_left_3_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.0895, 0, -0.0015)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -44.999992
            float physics:upperLimit = 224.99995
        }
    }

    def Xform "arm_left_3_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.007418, -0.004361, 0.134194)
        float3 physics:diagonalInertia = (0.0199798, 0.0197147, 0.00264646)
        float physics:mass = 1.8
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0, -5.551115123125783e-17, -1.0000000000000002, 0), (0.9999999957680001, -0.00009199999980546991, 5.551115123125783e-17, 0), (-0.00009199999980530338, -0.9999999957680001, 0, 0), (12.554402785769689, 2.095494993231855, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_4_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_3_link>
            rel physics:body1 = </world/arm_left_4_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.02, -0.027, 0.222)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, -0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -22.499996
            float physics:upperLimit = 134.99974
        }
    }

    def Xform "arm_left_4_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.095658, -0.014666, -0.018133)
        float3 physics:diagonalInertia = (0.00906004, 0.00831328, 0.00177669)
        float physics:mass = 1.4327
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.00009199999980546991, -0.9999999957680001, 0, 0), (0, 0, 1, 0), (-0.9999999957680001, 0.00009199999980535889, 0, 0), (12.527382361883996, 1.8734974781713536, 0.7065000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_5_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_4_link>
            rel physics:body1 = </world/arm_left_5_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.162, -0.02, -0.027)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120.00028
            float physics:upperLimit = 120.00028
        }
    }

    def Xform "arm_left_5_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.001078, -0.000151, 0.077173)
        float3 physics:diagonalInertia = (0.00103619, 0.000794527, 0.000439824)
        float physics:mass = 0.935914
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980541702, 0, 0), (0, 0, 1, 0), (0.00009199999980541702, 0.999999995768, 0, 0), (12.554367457769763, 1.711494994856943, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_6_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_5_link>
            rel physics:body1 = </world/arm_left_6_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, -0.15)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, -0.5, -0.5, -0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -81.00019
            float physics:upperLimit = 81.00019
        }
    }

    def Xform "arm_left_6_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.000153, -0.003122, 0.000183)
        float3 physics:diagonalInertia = (0.0000385419, 0.0000333205, 0.0000329226)
        float physics:mass = 0.302758
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.00009199999980524787, 0.999999995768, 0, 0), (-0.999999995768, 0.00009199999980524787, -0, 0), (-0, 0, 1, 0), (12.554353657769791, 1.561494995491743, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_left_7_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_6_link>
            rel physics:body1 = </world/arm_left_7_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120.00028
            float physics:upperLimit = 120.00028
        }
    }

    def Xform "arm_left_7_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.000175871, 0.000176378, -0.0832973)
        float3 physics:diagonalInertia = (0.00233888, 0.00201144, 0.000756432)
        float physics:mass = 1.00286
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.9999999957680001, 0.00009199999980526001, 0, 0), (0, 0, 1, 0), (0.00009199999980526001, 0.999999995768, 0, 0), (12.554353657769791, 1.561494995491743, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "geom_527" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.0025), (0.005, 0.005, 0.0025)]
            double height = 0.005
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.005
            matrix4d xformOp:transform = ( (2.220446049250313e-16, -0.9999999999999998, -0, 0), (-0.9999999999999998, 2.220446049250313e-16, 0, 0), (0, 0, -0.9999999999999996, 0), (0, 0, -0.047, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsPrismaticJoint "gripper_left_right_finger_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_7_link>
            rel physics:body1 = </world/gripper_left_right_finger_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, -0.076575)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, -0.5)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.045
        }

        def PhysicsPrismaticJoint "gripper_left_left_finger_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_left_7_link>
            rel physics:body1 = </world/gripper_left_left_finger_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, -0.076575)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, -0.5, -0.5, -0.5)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.045
        }
    }

    def Xform "gripper_left_right_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.00447, 0.010766, -0.121013)
        float3 physics:diagonalInertia = (0.000161667, 0.000161667, 0.000161667)
        float physics:mass = 0.10998
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1.1102230246251565e-16, 0, -0.9999999999999999, 0), (-0.9999999957679999, 0.00009199999980524787, 0, 0), (0.00009199999980513685, 0.9999999957679999, 1.1102230246251565e-16, 0), (12.554346612869807, 1.4849199958158084, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "gripper_left_left_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.00447, 0.010766, -0.121013)
        float3 physics:diagonalInertia = (0.000161667, 0.000161667, 0.000161667)
        float physics:mass = 0.10998
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1.1102230246251565e-16, 0, -0.9999999999999999, 0), (-0.9999999957679999, 0.00009199999980524787, 0, 0), (0.00009199999980513685, 0.9999999957679999, 1.1102230246251565e-16, 0), (12.554346612869807, 1.4849199958158084, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "arm_right_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.061191, -0.022397, -0.012835)
        float3 physics:diagonalInertia = (0.00510233, 0.00510233, 0.00510233)
        float physics:mass = 1.56343
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.00009199999980524787, 0.999999995768, 0, 0), (-0.999999995768, 0.00009199999980524787, 0, 0), (0, 0, 1, 0), (12.536457479845748, 2.6899966467159273, 0.7175000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_1_link>
            rel physics:body1 = </world/arm_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.125, -0.0195, -0.031)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.50016
            float physics:upperLimit = 90.00021
        }
    }

    def Xform "arm_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.030432, 0.000229, -0.005942)
        float3 physics:diagonalInertia = (0.00437229, 0.00432701, 0.0017837)
        float physics:mass = 1.8004
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.00009199999980502582, 0.9999999957680002, 0, 0), (0, -2.220446049250313e-16, -1.0000000000000002, 0), (-0.9999999957680002, 0.00009199999980524787, -2.220446049250313e-16, 0), (12.555968979763199, 2.8149948521869312, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_3_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_2_link>
            rel physics:body1 = </world/arm_right_3_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.0895, 0, -0.0015)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, -0.5, -0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -44.999992
            float physics:upperLimit = 224.99995
        }
    }

    def Xform "arm_right_3_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.007418, -0.004361, -0.134194)
        float3 physics:diagonalInertia = (0.0200771, 0.0196154, 0.00264853)
        float physics:mass = 1.8
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, 0, -1.0000000000000002, 0), (0.9999999957680002, -0.00009199999980546991, 0, 0), (-0.00009199999980524787, -0.9999999957680002, -2.220446049250313e-16, 0), (12.557477213756833, 2.9044947138081674, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_4_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_3_link>
            rel physics:body1 = </world/arm_right_4_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.02, -0.027, -0.222)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, -0.5, -0.5, -0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -22.499996
            float physics:upperLimit = 134.99974
        }
    }

    def Xform "arm_right_4_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.095658, 0.014666, 0.018133)
        float3 physics:diagonalInertia = (0.00906004, 0.00831328, 0.00177669)
        float physics:mass = 1.4327
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.00009199999980546991, -0.9999999957680001, 5.551115123125783e-17, 0), (-5.551115123125783e-17, -2.220446049250313e-16, -1.0000000000000002, 0), (0.9999999957680001, -0.00009199999980530338, -2.220446049250313e-16, 0), (12.530497637871054, 3.1264971968686583, 0.7065000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_5_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_4_link>
            rel physics:body1 = </world/arm_right_5_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.162, 0.02, 0.027)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120.00028
            float physics:upperLimit = 120.00028
        }
    }

    def Xform "arm_right_5_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.001078, -0.000151, -0.077173)
        float3 physics:diagonalInertia = (0.00103619, 0.000794527, 0.000439824)
        float physics:mass = 0.935914
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.999999995768, -0.0000919999998053385, -7.850301355152856e-17, 0), (-7.850301355152856e-17, 0, -1, 0), (0.0000919999998053385, 0.999999995768, 0, 0), (12.55751254175676, 3.2884947121830796, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_6_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_5_link>
            rel physics:body1 = </world/arm_right_6_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.15)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, -0.5, -0.5, -0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -81.00019
            float physics:upperLimit = 81.00019
        }
    }

    def Xform "arm_right_6_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.000153, -0.003122, 0.000183)
        float3 physics:diagonalInertia = (0.0000385419, 0.0000333205, 0.0000329226)
        float physics:mass = 0.302758
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.00009199999980524787, 0.999999995768, -3.611212651149351e-21, 0), (0.999999995768, -0.00009199999980524787, -7.850462285113086e-17, 0), (-7.850462285113086e-17, 3.611212651149351e-21, -1, 0), (12.55752634175673, 3.43849471154828, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "arm_right_7_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_6_link>
            rel physics:body1 = </world/arm_right_7_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120.00028
            float physics:upperLimit = 120.00028
        }
    }

    def Xform "arm_right_7_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.000173877, 0.000176378, 0.0817469)
        float3 physics:diagonalInertia = (0.00259542, 0.00226812, 0.000756434)
        float physics:mass = 1.00286
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.999999995768, -0.00009199999980526001, -3.9254894907553295e-17, 0), (-3.9254894907553295e-17, 0, -1, 0), (0.00009199999980526001, 0.999999995768, 0, 0), (12.55752634175673, 3.43849471154828, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsPrismaticJoint "gripper_right_right_finger_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/arm_right_7_link>
            rel physics:body1 = </world/gripper_right_right_finger_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.076575)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.5, -0.5, 0.5, -0.5)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 0.045
        }
    }

    def Xform "gripper_right_right_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.00447, 0.010766, -0.121013)
        float3 physics:diagonalInertia = (0.000161667, 0.000161667, 0.000161667)
        float physics:mass = 0.10998
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-2.220446049250313e-16, -5.551115123125783e-17, 1.0000000000000002, 0), (-0.9999999957680004, 0.0000919999998049148, 5.551115123125783e-17, 0), (-0.00009199999980519236, -0.9999999957680004, -4.440892098500626e-16, 0), (12.557533386656715, 3.515069711224214, 0.6865000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

